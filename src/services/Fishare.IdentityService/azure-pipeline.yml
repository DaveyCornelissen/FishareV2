trigger:
    paths:
      include:
        - src/services/Fishare.IdentityService/*
    branches:
      include:
        - master
  
resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'dcornelissen DockerHub'
  imageRepository: 'dcornelissen/Fishare.Identityservice'
  tag: '$(Build.BuildId)'
  solutionPath: 'src/services/Fishare.IdentityService'
  projectPath: '$(solutionPath)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build_Analyze
  displayName: Build and Analyze Project
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:        
      - task: NodeTool@0
        displayName: Install Dependencies
        inputs:
          versionSpec: 12.x
          checkLatest: true
      - task: Npm@1
        displayName: install project
        inputs:
          workingDir: $(solutionPath)
          command: install

      - script: npm test
        displayName: Jest run Unittests
        workingDirectory: $(solutionPath)

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          searchFolder: $(solutionPath)
          testResultsFiles: '**/junit.xml'

- stage: Code_Quality
  displayName: Static Code Quality
  jobs:
  - job: CodeQuality
    displayName: SonarCloud Static Code Quality
    pool:
      vmImage: $(vmImageName)
    steps:            
      
      - task: NodeTool@0
        displayName: Install Dependencies
        inputs:
          versionSpec: 12.x
          checkLatest: true
      - task: Npm@1
        displayName: install project
        inputs:
          workingDir: $(solutionPath)
          command: install
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'fishare-identityservice'
          scannerMode: 'CLI'
          configMode: 'file'
          configFile: '$(solutionPath)/sonar-project.properties'

      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'

- stage: Build_Publish_Docker
  displayName: Build and Publish Docker file
  jobs:
  - job: ReleaseDocker
    displayName: Build and Publish
    pool:
      vmImage: $(vmImageName)
    steps:        
      - task: Docker@2
        inputs:
          containerRegistry: '$(dockerRegistryServiceConnection)'
          repository: '$(imageRepository)'
          command: 'buildAndPush'
          Dockerfile: '$(solutionPath)/Dockerfile'
          tags: |
            $(tag)
            latest
