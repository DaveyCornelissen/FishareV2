trigger:
    paths:
      include:
        - services/Fishare-IdentityService/*
    branches:
      include:
        - master
  
resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'dcornelissen DockerHub'
  imageRepository: 'dcornelissen/Fishare-Identityservice'
  tag: '$(Build.BuildId)'
  solutionPath: 'src/services/Fishare.IdentityService'
  projectPath: '$(solutionPath)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build Docker Container
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:        
      - task: Docker@2
        inputs:
          repository: '$(imageRepository)'
          command: 'build'
          Dockerfile: '$(solutionPath)/Dockerfile'

- stage: Testing
  displayName: Testing Idenityservice
  jobs:
    - job: Test
      displayName: Unittest
      pool:
        vmImage: $(vmImageName)
      steps:
      - script: cd $(solutionPath)
      - script: npm install
      - script: npm test
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '**/TEST-RESULTS.xml'

- stage: Publish
  displayName: Publish Docker Image
  jobs:
  - job: Publish
    displayName: Publish
    steps:        
      - task: Docker@2
        inputs:
          containerRegistry: '$(dockerRegistryServiceConnection)'
          repository: '$(imageRepository)'
          command: 'push'
          tags: |
            $(tag)
            latest
